# For example, suppose you have the following list:

# 1-3 a: abcde
# 1-3 b: cdefg
# 2-9 c: ccccccccc

# Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.

# In the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies.

# How many passwords are valid according to their policies?


# with open(r"") as f:
#     password = f.readlines()

# valid = 0

#open the file
#iterate through each line, seperating the numbers at the beginning from the letters at the end, check for count of letter before the : in the string after the :
#count the letter before the :
# if letter.count = range of letters at the beginning of line then valid + 1 else pass
with open(r'C:\Users\cmccl\Documents\GitHub\AdventofCode2020\Day 2\Day2Input.txt') as f:
    data = [line.strip().split(' ') for line in f]


def first_policy(first, second, letter, password):
    return first <= password.count(letter) <= second

def second_policy(first, second, letter, password):
    return (password[first - 1] == letter) ^ (password[second - 1] == letter)

def analyze(policy):
    result = 0
    for line in data:
        first, second= [int(i) for i in line[0].split('-')]
        letter = line[1].replace(':','')
        password = line[2]

        if policy(first, second, letter, password):
            result += 1

    return result

print(analyze(first_policy))
print(analyze(second_policy))